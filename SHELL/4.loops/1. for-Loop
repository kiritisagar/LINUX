for` Loop**
- **Purpose:** Repeats a set of commands for each item in a list.

for variable in list
do
    # Commands to execute
done


variable: A placeholder that takes the value of each item in the list one at a time.
list: A space-separated list of items that variable will iterate over.
do and done: Define the start and end of the commands to be executed in each iteration.

________________________________________________________________________________________________________________________________________________




#!/bin/bash

directory="/root/Shell/" #required path

# Loop through each file in the directory
for file in "$directory"*
do 
    echo "File: $file"
done

```




### 4. **`select` Loop**
- **Purpose:** Creates a simple menu for the user to choose from.
- **Example:**
  ```bash
  PS3="Select an option: "
  select option in "Option 1" "Option 2" "Quit"
  do
      echo "You selected $option"
      break
  done
  ```
  This loop presents a menu and prints the selected option.

### 5. **`break` and `continue`**
- **`break`:** Exits the loop early.
- **`continue`:** Skips the current iteration and moves to the next one.

- **Example with `break`:**
  ```bash
  for num in 1 2 3 4 5
  do
      if [ $num -eq 3 ]; then
          break
      fi
      echo "Number: $num"
  done
  ```
  Stops the loop when the number 3 is reached.

- **Example with `continue`:**
  ```bash
  for num in 1 2 3 4 5
  do
      if [ $num -eq 3 ]; then
          continue
      fi
      echo "Number: $num"
  done
  ```
  Skips printing the number 3.

These are the basics of using loops in shell scripting to automate tasks!
